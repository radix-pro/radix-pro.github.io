var list = {
  "PROXY proxy.local:8888": [
    "ifconfig.me",
    "openai.com",
    "btc-alpha.com",
    "www.speedtest.net",
  ],
};

function partition(arr, start, end) {
  const pivotValue = arr[start]
  let swapIndex = start
  for (let i = start + 1; i <= end; i++) {
    if (pivotValue > arr[i]) {
      swapIndex++
      if (i !== swapIndex) {
        ;[arr[i], arr[swapIndex]] = [arr[swapIndex], arr[i]]
      }
    }
  }
  if (swapIndex !== start) {
    ;[arr[swapIndex], arr[start]] = [arr[start], arr[swapIndex]]
  }
  return swapIndex
}
    
function quickSort(arr, start = 0, end = arr.length - 1) {
  if (start >= end) return;
  let pivotIndex = partition(arr, start, end);
  quickSort(arr, start, pivotIndex - 1);
  quickSort(arr, pivotIndex + 1, end);
  return arr
}

Array.prototype.binarySearch = function(v) {
    if ( !this.length ) { return false; }
    if ( this[0] === v ) { return true; }
    var i, mid,
        start = 0,
        end = this.length,
        c = false;
    while ( c = (i = this[mid = start+((end-start)>>1)]) !== v ) {
        i < v ? (start = mid) : (end = mid);
        if (start >= end - 1) { break; }
    }
    return !c
};

for ( let [key, value] of Object.entries(list) ) {
    var converted = [];
    for ( let [num, host] of Object.entries(value) ) {
        var chunks = host.split('.');
        if ( !Array.isArray(converted[chunks.length]) ) {
            ;converted[chunks.length] = []
        }
        ;converted[chunks.length].push(host)
    }
    for ( let [num] of Object.entries(converted) ) {
        ;converted[num] = quickSort(converted[num].map(e => e.toLowerCase()))
    }
    list[key] = converted;
}

function FindProxyForURL(url, host) {
    for (let [key, value] of Object.entries(list)) {
        var chunks = host.split('.');
        for ( var i = chunks.length; i > 0; i--) {
            if ( Array.isArray(value[i]) && value[i].binarySearch(chunks.join('.').toLowerCase()) ) {
                ;return(key)
            }
            ;chunks.shift()
        }        
    }
    return "DIRECT"
}
